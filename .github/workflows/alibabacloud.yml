name: Build And Deploy To Aliyun ECS

on: # 该 CI/CD 触发时的事件
  pull_request:
    types: [ closed ]
    branches: [ master ] # 当一个指向 master 分支的 PR 被关闭时触发
  workflow_dispatch: {} # 允许在 GitHub Actions 页面手动触发此工作流（可用于回滚）

jobs: # 需要执行的任务
  build-and-deploy: # 将任务名修改得更清晰
    if: github.event.pull_request.merged == true # 只有当 PR 被合并时才运行此任务
    runs-on: ubuntu-latest # github分配的运行平台
    steps: # 任务的一系列步骤

      # 第 1 步：拉取代码
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: master
          submodules: true

      # 第 2 步：设置 Node.js 环境为 v18，以确保依赖兼容性
      - name: Setup Node.js v18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm' # 使用缓存加快后续构建速度

      # 第 3 步：使用 npm ci 进行干净的依赖安装
      - name: Install Dependencies
        run: npm ci

      # 第 4 步：执行代码格式化检查与修复
      - name: Lint and Fix
        run: npm run lint -- --fix

      # 第 5 步：执行构建命令
      - name: Build Project
        run: npm run build # 这会生成一个 dist 目录

      # 第 6 步：部署到阿里云服务器
      - name: Deploy to Aliyun Server
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }} # 阿里云的私钥
          ARGS: "-avzr --delete"
          # 注意这里的 SOURCE 已经修改，末尾的 / 很重要
          # 它表示将 dist 目录下的所有内容同步过去，而不是 dist 目录本身
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }} # 阿里云的 ip
          REMOTE_USER: ${{ secrets.REMOTE_USER }} # 阿里云用户
          TARGET: "/usr/local/tomcat9/webapps/tools1" # 被部署的服务器路径

